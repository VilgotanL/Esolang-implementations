_ = {" " | "\t" | "\n" | comment}
comment = "#" {!"\n" ANY}

ANY = \x00-\xFF
ANY_as_hex = "\x00" `00` | "\x01" `01` | "\x02" `02` | "\x03" `03` | "\x04" `04` | "\x05" `05` | "\x06" `06` | "\x07" `07` | "\x08" `08` | "\x09" `09` | "\x0a" `0a` | "\x0b" `0b` | "\x0c" `0c` | "\x0d" `0d` | "\x0e" `0e` | "\x0f" `0f` | "\x10" `10` | "\x11" `11` | "\x12" `12` | "\x13" `13` | "\x14" `14` | "\x15" `15` | "\x16" `16` | "\x17" `17` | "\x18" `18` | "\x19" `19` | "\x1a" `1a` | "\x1b" `1b` | "\x1c" `1c` | "\x1d" `1d` | "\x1e" `1e` | "\x1f" `1f` | "\x20" `20` | "\x21" `21` | "\x22" `22` | "\x23" `23` | "\x24" `24` | "\x25" `25` | "\x26" `26` | "\x27" `27` | "\x28" `28` | "\x29" `29` | "\x2a" `2a` | "\x2b" `2b` | "\x2c" `2c` | "\x2d" `2d` | "\x2e" `2e` | "\x2f" `2f` | "\x30" `30` | "\x31" `31` | "\x32" `32` | "\x33" `33` | "\x34" `34` | "\x35" `35` | "\x36" `36` | "\x37" `37` | "\x38" `38` | "\x39" `39` | "\x3a" `3a` | "\x3b" `3b` | "\x3c" `3c` | "\x3d" `3d` | "\x3e" `3e` | "\x3f" `3f` | "\x40" `40` | "\x41" `41` | "\x42" `42` | "\x43" `43` | "\x44" `44` | "\x45" `45` | "\x46" `46` | "\x47" `47` | "\x48" `48` | "\x49" `49` | "\x4a" `4a` | "\x4b" `4b` | "\x4c" `4c` | "\x4d" `4d` | "\x4e" `4e` | "\x4f" `4f` | "\x50" `50` | "\x51" `51` | "\x52" `52` | "\x53" `53` | "\x54" `54` | "\x55" `55` | "\x56" `56` | "\x57" `57` | "\x58" `58` | "\x59" `59` | "\x5a" `5a` | "\x5b" `5b` | "\x5c" `5c` | "\x5d" `5d` | "\x5e" `5e` | "\x5f" `5f` | "\x60" `60` | "\x61" `61` | "\x62" `62` | "\x63" `63` | "\x64" `64` | "\x65" `65` | "\x66" `66` | "\x67" `67` | "\x68" `68` | "\x69" `69` | "\x6a" `6a` | "\x6b" `6b` | "\x6c" `6c` | "\x6d" `6d` | "\x6e" `6e` | "\x6f" `6f` | "\x70" `70` | "\x71" `71` | "\x72" `72` | "\x73" `73` | "\x74" `74` | "\x75" `75` | "\x76" `76` | "\x77" `77` | "\x78" `78` | "\x79" `79` | "\x7a" `7a` | "\x7b" `7b` | "\x7c" `7c` | "\x7d" `7d` | "\x7e" `7e` | "\x7f" `7f` | "\x80" `80` | "\x81" `81` | "\x82" `82` | "\x83" `83` | "\x84" `84` | "\x85" `85` | "\x86" `86` | "\x87" `87` | "\x88" `88` | "\x89" `89` | "\x8a" `8a` | "\x8b" `8b` | "\x8c" `8c` | "\x8d" `8d` | "\x8e" `8e` | "\x8f" `8f` | "\x90" `90` | "\x91" `91` | "\x92" `92` | "\x93" `93` | "\x94" `94` | "\x95" `95` | "\x96" `96` | "\x97" `97` | "\x98" `98` | "\x99" `99` | "\x9a" `9a` | "\x9b" `9b` | "\x9c" `9c` | "\x9d" `9d` | "\x9e" `9e` | "\x9f" `9f` | "\xa0" `a0` | "\xa1" `a1` | "\xa2" `a2` | "\xa3" `a3` | "\xa4" `a4` | "\xa5" `a5` | "\xa6" `a6` | "\xa7" `a7` | "\xa8" `a8` | "\xa9" `a9` | "\xaa" `aa` | "\xab" `ab` | "\xac" `ac` | "\xad" `ad` | "\xae" `ae` | "\xaf" `af` | "\xb0" `b0` | "\xb1" `b1` | "\xb2" `b2` | "\xb3" `b3` | "\xb4" `b4` | "\xb5" `b5` | "\xb6" `b6` | "\xb7" `b7` | "\xb8" `b8` | "\xb9" `b9` | "\xba" `ba` | "\xbb" `bb` | "\xbc" `bc` | "\xbd" `bd` | "\xbe" `be` | "\xbf" `bf` | "\xc0" `c0` | "\xc1" `c1` | "\xc2" `c2` | "\xc3" `c3` | "\xc4" `c4` | "\xc5" `c5` | "\xc6" `c6` | "\xc7" `c7` | "\xc8" `c8` | "\xc9" `c9` | "\xca" `ca` | "\xcb" `cb` | "\xcc" `cc` | "\xcd" `cd` | "\xce" `ce` | "\xcf" `cf` | "\xd0" `d0` | "\xd1" `d1` | "\xd2" `d2` | "\xd3" `d3` | "\xd4" `d4` | "\xd5" `d5` | "\xd6" `d6` | "\xd7" `d7` | "\xd8" `d8` | "\xd9" `d9` | "\xda" `da` | "\xdb" `db` | "\xdc" `dc` | "\xdd" `dd` | "\xde" `de` | "\xdf" `df` | "\xe0" `e0` | "\xe1" `e1` | "\xe2" `e2` | "\xe3" `e3` | "\xe4" `e4` | "\xe5" `e5` | "\xe6" `e6` | "\xe7" `e7` | "\xe8" `e8` | "\xe9" `e9` | "\xea" `ea` | "\xeb" `eb` | "\xec" `ec` | "\xed" `ed` | "\xee" `ee` | "\xef" `ef` | "\xf0" `f0` | "\xf1" `f1` | "\xf2" `f2` | "\xf3" `f3` | "\xf4" `f4` | "\xf5" `f5` | "\xf6" `f6` | "\xf7" `f7` | "\xf8" `f8` | "\xf9" `f9` | "\xfa" `fa` | "\xfb" `fb` | "\xfc" `fc` | "\xfd" `fd` | "\xfe" `fe` | "\xff" `ff`
HEX = %0-9 | %A-F | %a-f
identifier = (%A-Z | %a-z | "_" `_`) {%A-Z | %a-z | %0-9 | "_" `_`}
integer = `(fromInt(` (%1-9 {%0-9} | "0" `0`) `))`

char = `\x` ANY_as_hex
string = `(fromStr("` ('"' {!'"' char} '"' | "'" {!"'" char} "'") `"))`

idend = !(A-Z | a-z | 0-9 | "_")


# Main
main = `
const variables = {};
const functions = {
	num2str: async function(n) {
		if(arguments.length < 1) throw "num2str missing argument";
		return fromStr(""+n.length);
	},
	geti: async function(arr, n) {
		if(arguments.length < 2) throw "geti missing arguments";
		if(n.length >= arr.length) throw "geti index out of range";
		return arr[n.length];
	},
	seti: async function(arr, n, val) {
		if(arguments.length < 3) throw "seti missing arguments";
		if(n.length >= arr.length) throw "seti index out of range";
		arr[n.length] = val;
	},
};

function fromInt(n) {
	if(!Number.isSafeInteger(n)) {
		console.log(n);
		throw "Erorror1o! integër is not integer";
	}
	if(n < 0) throw "Integer ,must be nonnegative!";
	return Array(n).fill(0).map(_ => []);
}
function fromStr(str) {
	return str.split("").map(c => fromInt(c.charCodeAt(0)));
}
function toStr(arr) {
	return arr.map(c => String.fromCharCode(c.length)).join("");
}
` _ {statement _}

statement
	= "printLn" _ `interpreter.output(toStr(` expr `)+"\n");`
	| "print" _ `interpreter.output(toStr(` expr `));`
	| "give up" `throw 0;`
	| "sleep ms" _ `await new Promise(res => setTimeout(res, (` expr `).length));`
	| "amogn us" `window.open("steam://rungameid/945360", "_blank");`
	| `variables["` identifier `"] = (` _ "=" _ expr `);`
	| "def" _ `functions["` identifier `"] = async function(...args) { variables["argLen"] = fromInt(args.length); for(let i=0; i<args.length; i++) variables["arg"+(i+1)] = args[i]; variables["retVal"] = []; ` _ block ` return variables["retVal"]; };`
	| "if" _ "(" _ `if((` expr `).length) {` _ ")" _ block `}`
	| "while" _ "(" _ `while((` expr `).length) {` _ ")" _ block `}`
	| expr `;`

block = "{" `{` _ {statement _} `};` "}"

expr = expr_join
expr_join = `fromStr([toStr(` expr_or `)` {_ "join" `,` _ `toStr(` expr_or `)`}+ `].join(""))` | expr_or
expr_or = `fromInt((` expr_and _ "||" `).length || (` _ expr_or `).length || 0)` | expr_and # Short-circuiting
expr_and = `fromInt((` expr_comp _ "&&" `).length && (` _ expr_and `).length || 0)` | expr_comp # Short-circuiting
expr_comp
	= `fromInt((` expr_sum `).length < (` _ "<" _ expr_sum `).length ? 1 : 0)`
	| `fromInt((` expr_sum `).length === (` _ "==" _ expr_sum `).length ? 1 : 0)` # == checks if numbers are equal
	| `fromInt((` expr_sum `) === (` _ "===" _ expr_sum `) ? 1 : 0)` # === checks if lists are the same mutable list
	| expr_sum
expr_sum = `fromInt((` expr_prod `).length` {_ ("+" `+` | "-" `-`) _ `(` expr_prod `).length)`}+ | expr_prod
expr_prod = `fromInt((` expr_pow `).length` {_ ("*" `*` | "%" `%`) _ `(` expr_pow `).length)`}+ | expr_pow #TODO way to do integer division
expr_pow = `fromInt((` expr_prefix `).length ** (` _ "**" _ expr_pow `).length)` | expr_prefix
expr_prefix
	= `fromInt((` "!" _ expr_prefix `).length ? 0 : 1)`
	| "typeof" _ !!expr_prefix `(fromStr("list"))`
	| func_call
func_call
	= `(await ` func_get _ "(" `(` _ [expr _ {"," `,` _ expr _}] `)` ")" ` ?? [])` | group
func_get = `(Object.hasOwn(functions, "` &&identifier `") ? functions["` &&identifier `"] : (() => { throw "unvalid function: ` identifier `"; })())`
group = "(" _ expr _ ")" | value

value
	= integer
	| string
	| "[" `[` _ [expr _ {"," `,` _ expr _}] `]` "]"
	| ("true" idend `([[]])` | "false" idend `([])`)
	| "null" idend `([])`
	| "inPut" `(fromStr(prompt("Enter line of input:") ?? ""))`
	| `(Object.hasOwn(variables, "` &&identifier `") ? variables["` &&identifier `"] : (() => { throw "unvalid vaierable: ` identifier `"; })())`
